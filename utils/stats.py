# utils/stats.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from utils.member import load_members
from utils.gsheets import load_sheet  # load t·ª´ Google Sheets

def get_stats(df_matches, members_df):
    if df_matches.empty:
        return pd.DataFrame(), 0

    # T·∫°o map gi√° c·ªßa h·ªôi vi√™n
    gia_map = dict(zip(members_df["T√™n"], members_df["Gi√° thua"]))

    rows = []
    for _, row in df_matches.iterrows():
        ngay = row["Ng√†y"]
        ghi_chu = row.get("Ghi ch√∫", "")
        gia = int(row.get("Gi√°", -1))
        names = [n.strip() for n in row["C·∫∑p thua"].replace(",", " ").split() if n.strip()]
        for name in names:
            fee = gia if gia > 0 else gia_map.get(name, 5000)
            rows.append({
                "T√™n": name,
                "S·ªë tr·∫≠n thua": 1,
                "Gi√°": fee,
                "Ng√†y": ngay,
                "Ghi ch√∫": ghi_chu
            })

    df = pd.DataFrame(rows)
    df_stats = df.groupby("T√™n", as_index=False).agg({
        "S·ªë tr·∫≠n thua": "sum",
        "Gi√°": "first"
    })
    df_stats["T·ªïng ti·ªÅn"] = df_stats["S·ªë tr·∫≠n thua"] * df_stats["Gi√°"]

    total = int(pd.to_numeric(df_stats["T·ªïng ti·ªÅn"], errors="coerce").fillna(0).sum())
    return df_stats, total, df  # tr·∫£ c·∫£ df g·ªëc ƒë·ªÉ l·∫•y ghi ch√∫ theo th√°ng

def show_stats_page():
    st.subheader("üìä B·∫£ng th·ªëng k√™")

    df_matches = load_sheet("matches")
    if df_matches.empty:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu.")
        return

    df_matches["Ng√†y_dt"] = pd.to_datetime(df_matches["Ng√†y"], format="%d/%m/%Y", errors="coerce")

    # Ch·ªçn th√°ng/nƒÉm
    months = list(range(1,13))
    month = st.selectbox("Ch·ªçn th√°ng", months, index=pd.Timestamp.now().month-1)
    years = sorted(df_matches["Ng√†y_dt"].dropna().dt.year.unique())
    year = st.selectbox("Ch·ªçn nƒÉm", years, index=0)

    # L·ªçc theo th√°ng/nƒÉm
    df_filtered = df_matches[
        (df_matches["Ng√†y_dt"].dt.month == month) &
        (df_matches["Ng√†y_dt"].dt.year == year)
    ]

    members_df = load_sheet("members")
    df_stats, total, df_for_notes = get_stats(df_filtered, members_df)

    if df_stats.empty:
        st.info(f"Kh√¥ng c√≥ d·ªØ li·ªáu cho {month}/{year}.")
        return

    st.dataframe(df_stats, use_container_width=True)
    st.markdown(f"### üí∞ T·ªïng thu: **{total:,}** VND")

    # L·∫•y ghi ch√∫ theo th√°ng (1 ng√†y 1 ghi ch√∫)
    notes = {}
    for _, row in df_for_notes.iterrows():
        note = str(row.get("Ghi ch√∫","")).strip()
        if note:
            notes[row["Ng√†y"]] = note

    if notes:
        st.markdown("### üìù C√°c ghi ch√∫ trong th√°ng:")
        for ngay, note in sorted(notes.items()):
            st.markdown(f"{ngay}: {note}")

    # Bi·ªÉu ƒë·ªì
    member_names = set(members_df["T√™n"].astype(str).str.strip().tolist())
    colors = ["#1f77b4" if name in member_names else "#ff7f0e" for name in df_stats["T√™n"]]

    fig, ax = plt.subplots()
    df_stats = df_stats.sort_values("T·ªïng ti·ªÅn", ascending=False)
    ax.bar(df_stats["T√™n"], df_stats["T·ªïng ti·ªÅn"], color=colors)
    ax.set_ylabel("T·ªïng ti·ªÅn (VND)")
    ax.set_title("Th·ªëng k√™ thu theo t·ª´ng ng∆∞·ªùi")
    ax.set_xticklabels(df_stats["T√™n"], rotation=45, ha="right")
    ax.grid(True, axis="y")
    st.pyplot(fig)
