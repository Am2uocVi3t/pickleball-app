# utils/input_info.py
import streamlit as st
import pandas as pd
import os
from utils.member import load_members
from utils.gsheets import load_sheet, save_sheet


SHEET_NAME = "matches"

def load_matches():
    df = load_sheet(SHEET_NAME)
    if df.empty:
        df = pd.DataFrame(columns=["Ng√†y", "C·∫∑p thua", "Ghi ch√∫", "Gi√°"])
    df = df.replace("nan", "", regex=False).fillna("")
    df["Ng√†y"] = df["Ng√†y"].astype(str).str.strip()
    df["C·∫∑p thua"] = df["C·∫∑p thua"].astype(str).str.strip()
    df["Ghi ch√∫"] = df["Ghi ch√∫"].astype(str).str.strip()
    df["Gi√°"] = pd.to_numeric(df["Gi√°"], errors="coerce").fillna(-1).astype(int)
    return df

def save_matches(df: pd.DataFrame):
    save_sheet(SHEET_NAME, df)

def format_team_name(s: str) -> str:
    """Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu m·ªói t·ª´, gi·ªØ nguy√™n ph·∫ßn c√≤n l·∫°i."""
    parts = [p for p in s.strip().split() if p]
    res = []
    for w in parts:
        if len(w) == 0:
            continue
        res.append(w[0].upper() + w[1:])
    return " ".join(res)

def show_match_page():
    st.header("Nh·∫≠p th√¥ng tin tr·∫≠n thua")

    # Ch·ªçn ng√†y
    ngay_chon = st.date_input("Ch·ªçn ng√†y", format="DD/MM/YYYY")

    # Form nh·∫≠p
    with st.form("match_form", clear_on_submit=True):
        tran_thua = st.text_input("C·∫∑p thua (ngƒÉn c√°ch b·∫±ng d·∫•u ,)")
        ghichu = st.text_input("Ghi ch√∫")
        gia_input = st.number_input(
            "Gi√° m·ªõi (n·∫øu c√≥ gi√° kh√°c h√£y nh·∫≠p gi√° 1 tr·∫≠n)",
            min_value=0,
            step=1000,
            value=0
        )
        submitted = st.form_submit_button("L∆∞u")

    if submitted:
        if not tran_thua or not tran_thua.strip():
            st.warning("Vui l√≤ng nh·∫≠p C·∫∑p thua!")
        else:
            members_df = load_members()
            items = [item.strip() for item in tran_thua.split(",") if item.strip()]
            formatted = [format_team_name(it) for it in items]

            ngay_str = ngay_chon.strftime("%d/%m/%Y")
            new_rows = []
            for name in formatted:
                if gia_input > 0:
                    fee = int(gia_input / 2)
                else:
                    if name in members_df["T√™n"].values:
                        fee = 5000
                    else:
                        fee = -1
                new_rows.append({
                    "Ng√†y": ngay_str,
                    "C·∫∑p thua": name,
                    "Ghi ch√∫": ghichu if ghichu.strip() else "",
                    "Gi√°": fee
                })

            df_all = load_matches()
            df_all = pd.concat([df_all, pd.DataFrame(new_rows)], ignore_index=True)
            save_matches(df_all)
            st.success(f"ƒê√£ l∆∞u {len(formatted)} c·∫∑p thua (ng√†y {ngay_str}).")

    # Toggle ·∫©n/hi·ªán danh s√°ch
    if "show_list" not in st.session_state:
        st.session_state.show_list = True

    st.subheader("Danh s√°ch tr·∫≠n thua")
    col_h, col_btn = st.columns([8,1])
    with col_h:
        st.write("")
    with col_btn:
        if st.button("üëÅ"):
            st.session_state.show_list = not st.session_state.show_list

    if not st.session_state.show_list:
        return

    # Hi·ªÉn th·ªã danh s√°ch tr·∫≠n thua theo ng√†y
    df = load_matches()
    if df.empty:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu.")
        return

    ngay_str = ngay_chon.strftime("%d/%m/%Y")
    df_filtered = df[df["Ng√†y"] == ngay_str]

    if df_filtered.empty:
        st.info("Kh√¥ng c√≥ tr·∫≠n thua cho ng√†y ƒë√£ ch·ªçn.")
        return

    # Header
    h1, h2, h3, h4, h5 = st.columns([2,3,3,3,1])
    h1.markdown("**Ng√†y**")
    h2.markdown("**T√™n**")
    h3.markdown("**Ghi ch√∫**")
    h4.markdown("**Gi√°**")
    h5.markdown("**X√≥a**")

    for idx, row in df_filtered.iterrows():
        c1, c2, c3, c4, c5 = st.columns([2,3,3,3,1])
        c1.write(row["Ng√†y"])
        c2.write(row["C·∫∑p thua"])
        c3.write(row["Ghi ch√∫"] if row["Ghi ch√∫"] else "")


        if int(row["Gi√°"]) > 0:
        # N·∫øu c√≥ gi√° nh·∫≠p t·ª´ form th√¨ hi·ªÉn th·ªã g·∫•p ƒë√¥i (gi√° c·∫∑p)
            c4.write(f"{int(row['Gi√°']) * 2:,} VNƒê")
        else:
            # N·∫øu kh√¥ng c√≥ gi√° override th√¨ ƒë·ªÉ tr·ªëng
            c4.write("")

        if c5.button("‚ùå", key=f"del_{idx}"):
            df_all = load_matches()
            if idx in df_all.index:
                df_all = df_all.drop(idx).reset_index(drop=True)
                save_matches(df_all)
                st.success("ƒê√£ x√≥a 1 d√≤ng.")
                st.rerun()
                return
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y d√≤ng ƒë·ªÉ x√≥a.")
                return
